//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""888270ae-437f-4c54-92b0-bca670b49e27"",
            ""actions"": [
                {
                    ""name"": ""LeftLeverUp"",
                    ""type"": ""Button"",
                    ""id"": ""78335eb2-354d-48fd-bd8b-13763bc4b73a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftLeverDown"",
                    ""type"": ""Button"",
                    ""id"": ""8967f063-565e-47fd-a720-f4f4d8ccf2df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightLeverUp"",
                    ""type"": ""Button"",
                    ""id"": ""cf2154ef-50b3-4255-b4fb-ed61a754f493"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightLeverDown"",
                    ""type"": ""Button"",
                    ""id"": ""911e0712-0246-43ee-b2f6-76159a04cc8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""79bc387a-f85d-4f57-9cc2-264d9e00056c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftDial"",
                    ""type"": ""Value"",
                    ""id"": ""6f7096b0-4684-402d-9624-8c2e88b38a70"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""StickDeadzone(min=0.9,max=0.925)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightDial"",
                    ""type"": ""Value"",
                    ""id"": ""1659953b-a9a8-49de-b755-94cb6c343c98"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""StickDeadzone(min=0.9,max=0.925)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""29cceefa-c0f7-47f8-82ab-0a6cb4c8cb35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reloaded"",
                    ""type"": ""Button"",
                    ""id"": ""f2f4406f-3c74-4194-99e0-e130d1e82186"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTypeOfBullet"",
                    ""type"": ""Button"",
                    ""id"": ""727f88e6-7cd9-48b2-92ab-ffd44aaa9076"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAtSights"",
                    ""type"": ""Button"",
                    ""id"": ""c8ff84f3-d5a6-4b06-b856-2f24f5ea41bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookOut"",
                    ""type"": ""Button"",
                    ""id"": ""b69e6b5c-a21e-4ae1-b85f-98fe949e7e4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""952121c7-91e0-421d-8d66-5ae7196ae6ff"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftLeverUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95fbc601-538e-42a9-bfa8-c0cc7274d2de"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightLeverUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""216cada0-7c70-4617-b57d-f38cbb172cc9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightLeverDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b422549d-f196-4ecd-bfae-391f6531fa0a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftLeverDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""499892d4-5782-4bde-ad52-161bb89529fc"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9608dfe-3131-4c34-923e-c0c776b63951"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftDial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71e406a0-72ff-47c5-93fc-81a353e443f6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightDial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b4b89ee-23cf-44a1-8eb4-e868d4e9fe7d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f38f1e-aadb-4490-86c1-d80c1e14fb5f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reloaded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf874a51-afb0-41bc-b0b8-940bb6f0e72b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangeTypeOfBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81f44745-2859-4093-8fbb-432c032615aa"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAtSights"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b671c26-a202-4efc-9b75-7c1861fd128a"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hangar"",
            ""id"": ""3f379c86-ed51-40b7-a9a6-a89a4b756286"",
            ""actions"": [
                {
                    ""name"": ""VerticalMove"",
                    ""type"": ""Value"",
                    ""id"": ""65815458-cdb8-4eec-a4c4-9dfb43ea53cd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""052c859b-5004-404d-8e5b-ba7759a46a16"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""0fbb5bff-b28c-4526-924b-fb5fe3573736"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseUp"",
                    ""type"": ""Value"",
                    ""id"": ""881f9e28-1c72-405c-9160-091e239a00f8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseLeft"",
                    ""type"": ""Value"",
                    ""id"": ""e3ac75f8-1fd0-4c13-aa91-c2049a9bdd65"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseDown"",
                    ""type"": ""Value"",
                    ""id"": ""6d70f008-6b30-4805-8efa-66d0eb7ebb1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseRight"",
                    ""type"": ""Value"",
                    ""id"": ""5139174a-363b-4ffb-9761-8aebce8873b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""5c7fb0d3-7b92-4c53-90c5-1f77e1bc2c26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartBattle"",
                    ""type"": ""Button"",
                    ""id"": ""0a1c9741-1248-40fc-b31c-ee5b649a890a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bd26993-0661-42da-a763-1234f16e4852"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0c02db6-a231-4e9c-a1c1-5689193fd69a"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e95cb70-6f96-429b-a1d7-ef8413a233fe"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChooseUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2b9c3de-569d-4194-a919-11db2a06b824"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChooseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0764b496-dbdf-4413-8546-c524b92309ea"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChooseDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56da10d4-7a73-492d-8a90-90e31adcd788"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChooseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d293f9c-3851-4691-9b38-c505be9ed59e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8bdac22-b945-4e73-b19b-a71c408f0245"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0713043-5eef-4300-87c1-029c0f0a6637"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartBattle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LeftLeverUp = m_Player.FindAction("LeftLeverUp", throwIfNotFound: true);
        m_Player_LeftLeverDown = m_Player.FindAction("LeftLeverDown", throwIfNotFound: true);
        m_Player_RightLeverUp = m_Player.FindAction("RightLeverUp", throwIfNotFound: true);
        m_Player_RightLeverDown = m_Player.FindAction("RightLeverDown", throwIfNotFound: true);
        m_Player_Camera = m_Player.FindAction("Camera", throwIfNotFound: true);
        m_Player_LeftDial = m_Player.FindAction("LeftDial", throwIfNotFound: true);
        m_Player_RightDial = m_Player.FindAction("RightDial", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Reloaded = m_Player.FindAction("Reloaded", throwIfNotFound: true);
        m_Player_ChangeTypeOfBullet = m_Player.FindAction("ChangeTypeOfBullet", throwIfNotFound: true);
        m_Player_LookAtSights = m_Player.FindAction("LookAtSights", throwIfNotFound: true);
        m_Player_LookOut = m_Player.FindAction("LookOut", throwIfNotFound: true);
        // Hangar
        m_Hangar = asset.FindActionMap("Hangar", throwIfNotFound: true);
        m_Hangar_VerticalMove = m_Hangar.FindAction("VerticalMove", throwIfNotFound: true);
        m_Hangar_Camera = m_Hangar.FindAction("Camera", throwIfNotFound: true);
        m_Hangar_Rotate = m_Hangar.FindAction("Rotate", throwIfNotFound: true);
        m_Hangar_ChooseUp = m_Hangar.FindAction("ChooseUp", throwIfNotFound: true);
        m_Hangar_ChooseLeft = m_Hangar.FindAction("ChooseLeft", throwIfNotFound: true);
        m_Hangar_ChooseDown = m_Hangar.FindAction("ChooseDown", throwIfNotFound: true);
        m_Hangar_ChooseRight = m_Hangar.FindAction("ChooseRight", throwIfNotFound: true);
        m_Hangar_Select = m_Hangar.FindAction("Select", throwIfNotFound: true);
        m_Hangar_StartBattle = m_Hangar.FindAction("StartBattle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_LeftLeverUp;
    private readonly InputAction m_Player_LeftLeverDown;
    private readonly InputAction m_Player_RightLeverUp;
    private readonly InputAction m_Player_RightLeverDown;
    private readonly InputAction m_Player_Camera;
    private readonly InputAction m_Player_LeftDial;
    private readonly InputAction m_Player_RightDial;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_Reloaded;
    private readonly InputAction m_Player_ChangeTypeOfBullet;
    private readonly InputAction m_Player_LookAtSights;
    private readonly InputAction m_Player_LookOut;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftLeverUp => m_Wrapper.m_Player_LeftLeverUp;
        public InputAction @LeftLeverDown => m_Wrapper.m_Player_LeftLeverDown;
        public InputAction @RightLeverUp => m_Wrapper.m_Player_RightLeverUp;
        public InputAction @RightLeverDown => m_Wrapper.m_Player_RightLeverDown;
        public InputAction @Camera => m_Wrapper.m_Player_Camera;
        public InputAction @LeftDial => m_Wrapper.m_Player_LeftDial;
        public InputAction @RightDial => m_Wrapper.m_Player_RightDial;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @Reloaded => m_Wrapper.m_Player_Reloaded;
        public InputAction @ChangeTypeOfBullet => m_Wrapper.m_Player_ChangeTypeOfBullet;
        public InputAction @LookAtSights => m_Wrapper.m_Player_LookAtSights;
        public InputAction @LookOut => m_Wrapper.m_Player_LookOut;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @LeftLeverUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftLeverUp;
                @LeftLeverUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftLeverUp;
                @LeftLeverUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftLeverUp;
                @LeftLeverDown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftLeverDown;
                @LeftLeverDown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftLeverDown;
                @LeftLeverDown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftLeverDown;
                @RightLeverUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightLeverUp;
                @RightLeverUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightLeverUp;
                @RightLeverUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightLeverUp;
                @RightLeverDown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightLeverDown;
                @RightLeverDown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightLeverDown;
                @RightLeverDown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightLeverDown;
                @Camera.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamera;
                @LeftDial.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftDial;
                @LeftDial.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftDial;
                @LeftDial.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftDial;
                @RightDial.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightDial;
                @RightDial.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightDial;
                @RightDial.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightDial;
                @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Reloaded.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloaded;
                @Reloaded.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloaded;
                @Reloaded.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloaded;
                @ChangeTypeOfBullet.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeTypeOfBullet;
                @ChangeTypeOfBullet.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeTypeOfBullet;
                @ChangeTypeOfBullet.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeTypeOfBullet;
                @LookAtSights.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookAtSights;
                @LookAtSights.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookAtSights;
                @LookAtSights.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookAtSights;
                @LookOut.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookOut;
                @LookOut.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookOut;
                @LookOut.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookOut;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftLeverUp.started += instance.OnLeftLeverUp;
                @LeftLeverUp.performed += instance.OnLeftLeverUp;
                @LeftLeverUp.canceled += instance.OnLeftLeverUp;
                @LeftLeverDown.started += instance.OnLeftLeverDown;
                @LeftLeverDown.performed += instance.OnLeftLeverDown;
                @LeftLeverDown.canceled += instance.OnLeftLeverDown;
                @RightLeverUp.started += instance.OnRightLeverUp;
                @RightLeverUp.performed += instance.OnRightLeverUp;
                @RightLeverUp.canceled += instance.OnRightLeverUp;
                @RightLeverDown.started += instance.OnRightLeverDown;
                @RightLeverDown.performed += instance.OnRightLeverDown;
                @RightLeverDown.canceled += instance.OnRightLeverDown;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @LeftDial.started += instance.OnLeftDial;
                @LeftDial.performed += instance.OnLeftDial;
                @LeftDial.canceled += instance.OnLeftDial;
                @RightDial.started += instance.OnRightDial;
                @RightDial.performed += instance.OnRightDial;
                @RightDial.canceled += instance.OnRightDial;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Reloaded.started += instance.OnReloaded;
                @Reloaded.performed += instance.OnReloaded;
                @Reloaded.canceled += instance.OnReloaded;
                @ChangeTypeOfBullet.started += instance.OnChangeTypeOfBullet;
                @ChangeTypeOfBullet.performed += instance.OnChangeTypeOfBullet;
                @ChangeTypeOfBullet.canceled += instance.OnChangeTypeOfBullet;
                @LookAtSights.started += instance.OnLookAtSights;
                @LookAtSights.performed += instance.OnLookAtSights;
                @LookAtSights.canceled += instance.OnLookAtSights;
                @LookOut.started += instance.OnLookOut;
                @LookOut.performed += instance.OnLookOut;
                @LookOut.canceled += instance.OnLookOut;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Hangar
    private readonly InputActionMap m_Hangar;
    private IHangarActions m_HangarActionsCallbackInterface;
    private readonly InputAction m_Hangar_VerticalMove;
    private readonly InputAction m_Hangar_Camera;
    private readonly InputAction m_Hangar_Rotate;
    private readonly InputAction m_Hangar_ChooseUp;
    private readonly InputAction m_Hangar_ChooseLeft;
    private readonly InputAction m_Hangar_ChooseDown;
    private readonly InputAction m_Hangar_ChooseRight;
    private readonly InputAction m_Hangar_Select;
    private readonly InputAction m_Hangar_StartBattle;
    public struct HangarActions
    {
        private @PlayerInput m_Wrapper;
        public HangarActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalMove => m_Wrapper.m_Hangar_VerticalMove;
        public InputAction @Camera => m_Wrapper.m_Hangar_Camera;
        public InputAction @Rotate => m_Wrapper.m_Hangar_Rotate;
        public InputAction @ChooseUp => m_Wrapper.m_Hangar_ChooseUp;
        public InputAction @ChooseLeft => m_Wrapper.m_Hangar_ChooseLeft;
        public InputAction @ChooseDown => m_Wrapper.m_Hangar_ChooseDown;
        public InputAction @ChooseRight => m_Wrapper.m_Hangar_ChooseRight;
        public InputAction @Select => m_Wrapper.m_Hangar_Select;
        public InputAction @StartBattle => m_Wrapper.m_Hangar_StartBattle;
        public InputActionMap Get() { return m_Wrapper.m_Hangar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HangarActions set) { return set.Get(); }
        public void SetCallbacks(IHangarActions instance)
        {
            if (m_Wrapper.m_HangarActionsCallbackInterface != null)
            {
                @VerticalMove.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnVerticalMove;
                @VerticalMove.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnVerticalMove;
                @VerticalMove.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnVerticalMove;
                @Camera.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnCamera;
                @Rotate.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnRotate;
                @ChooseUp.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseUp;
                @ChooseUp.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseUp;
                @ChooseUp.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseUp;
                @ChooseLeft.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseLeft;
                @ChooseLeft.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseLeft;
                @ChooseLeft.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseLeft;
                @ChooseDown.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseDown;
                @ChooseDown.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseDown;
                @ChooseDown.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseDown;
                @ChooseRight.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseRight;
                @ChooseRight.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseRight;
                @ChooseRight.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnChooseRight;
                @Select.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnSelect;
                @StartBattle.started -= m_Wrapper.m_HangarActionsCallbackInterface.OnStartBattle;
                @StartBattle.performed -= m_Wrapper.m_HangarActionsCallbackInterface.OnStartBattle;
                @StartBattle.canceled -= m_Wrapper.m_HangarActionsCallbackInterface.OnStartBattle;
            }
            m_Wrapper.m_HangarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @VerticalMove.started += instance.OnVerticalMove;
                @VerticalMove.performed += instance.OnVerticalMove;
                @VerticalMove.canceled += instance.OnVerticalMove;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @ChooseUp.started += instance.OnChooseUp;
                @ChooseUp.performed += instance.OnChooseUp;
                @ChooseUp.canceled += instance.OnChooseUp;
                @ChooseLeft.started += instance.OnChooseLeft;
                @ChooseLeft.performed += instance.OnChooseLeft;
                @ChooseLeft.canceled += instance.OnChooseLeft;
                @ChooseDown.started += instance.OnChooseDown;
                @ChooseDown.performed += instance.OnChooseDown;
                @ChooseDown.canceled += instance.OnChooseDown;
                @ChooseRight.started += instance.OnChooseRight;
                @ChooseRight.performed += instance.OnChooseRight;
                @ChooseRight.canceled += instance.OnChooseRight;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @StartBattle.started += instance.OnStartBattle;
                @StartBattle.performed += instance.OnStartBattle;
                @StartBattle.canceled += instance.OnStartBattle;
            }
        }
    }
    public HangarActions @Hangar => new HangarActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnLeftLeverUp(InputAction.CallbackContext context);
        void OnLeftLeverDown(InputAction.CallbackContext context);
        void OnRightLeverUp(InputAction.CallbackContext context);
        void OnRightLeverDown(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnLeftDial(InputAction.CallbackContext context);
        void OnRightDial(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnReloaded(InputAction.CallbackContext context);
        void OnChangeTypeOfBullet(InputAction.CallbackContext context);
        void OnLookAtSights(InputAction.CallbackContext context);
        void OnLookOut(InputAction.CallbackContext context);
    }
    public interface IHangarActions
    {
        void OnVerticalMove(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnChooseUp(InputAction.CallbackContext context);
        void OnChooseLeft(InputAction.CallbackContext context);
        void OnChooseDown(InputAction.CallbackContext context);
        void OnChooseRight(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnStartBattle(InputAction.CallbackContext context);
    }
}
